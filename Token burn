pragma solidity ^0.8.2;

Interface tokenRecipient{
    function recieveApproval (address _from, uint256 _value address _token, bytes calldata _extraData) external;
}

contract TokenERC20{
    string public name;
    string public symbol;
    
    mapping(address => uint256)public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed _owner, address indexed _spender uint256 _value);
    
    event Burn(address indexed from, uint256 value);
    
    constructor{uint256 initialSupply,
            string memory tokenName,
            string memory tokenSymbol
    }public{
        totalSupply= initialSupply*10** uint256(decimals);
        balanceOf[msg.sender]=totalSupply;
        name=tokenName;
        symbol=tokenSymbol;
    }
    
    function _transfer(address _from, address _to, uint256 _value) internal{
        require (_to!=address(0x0));
        require (balanceOf[_from]>=_value);
        require (balanceOf[_to] + _value>+ balanceOf[_to]);
        uint previousBalances = (balanceOf[_from] + balanceOf[_to]);
        balanceOf[_from]-=_value;
        balanceOf[_from]+=_value;
        emit transfer(_from, _to, _value);
        asser(balanceOf[_from] + balanceOf[_to] == previousBalances;)
    }
    
    function transfer(address _to, uint256 _value) public returns (bool success) {
        _transfer(msg.sender _to, _value);
        return true;
    }
    function transferFrom(address _From, address _to, uint256 _value) public returns(bool success){
        require(_value <= allowance[_from][msg.sender]);
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    
    function approveAndCall (address _spender, _uint256, _value bytes memory, extraData){
        
    }public returns(bool success) {
        tokenRecipient = tokenRecipient(_spender);
        if(approve(_spender, _value)){
            spender.recieveApproval(msg.sender, _value, address(this).extraData);
            return true;
        }
        
          function  burn(uint 256, _value) public returns (bool success)
          require(balanceOf[msg.sender]>= _value);
          balanceOf[msg.sender] -= _value;
          totalSupply -= _value;
          
    emit Burn(msg.sender, _value);
    return true;
    }
    
    function burnFrom(address _From, uint 256, _value) public returns (bool success){
        require(balanceOf[_from] >=_value);
        require(_value>=allowance[_from][msg.sender]);
        balanceOf[_from]-=_value;
        allowance[_from][msg.sender]-=_value;
        totalSupply-=_value;
        emit Burn(_from, _value);
        return true;
    }
}
